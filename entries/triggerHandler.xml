<?xml version="1.0"?>
<entry type="method" name="triggerHandler" return="Object">
  <title>.triggerHandler()</title>
  <desc>Execute all handlers attached to an element for an event.</desc>
  <signature>
    <added>1.2</added>
    <argument name="eventType" type="String">
      <desc>A string containing a JavaScript event type, such as <code>click</code> or <code>submit</code>.</desc>
    </argument>
    <argument name="extraParameters" optional="true">
      <type name="Array"/>
      <type name="PlainObject"/>
      <desc>Additional parameters to pass along to the event handler.</desc>
    </argument>
  </signature>
  <longdesc>
    <p>The <code>.triggerHandler()</code> method behaves similarly to <code>.trigger()</code>, with the following exceptions:</p>
    <ul>
      <li>The <code>.triggerHandler()</code> method does not attempt to invoke the property of the same name as the event name as a method (a behavior that may cause the default behavior of an event to occur in some objects. For example, using <code>trigger("submit")</code> on a form - triggers the <code>submit</code> and also submits the form, as a result of invoking the <code>submit()</code> method of the form).</li>
      <li>While <code>.trigger()</code> will operate on all elements matched by the jQuery object, <code>.triggerHandler()</code> only affects the first matched element.</li>
      <li>Events triggered with <code>.triggerHandler()</code> do not bubble up the DOM hierarchy; if they are not handled by the target element directly, they do nothing.</li>
      <li>Instead of returning the jQuery object (to allow chaining), <code>.triggerHandler()</code> returns whatever value was returned by the last handler it caused to be executed. If no handlers are triggered, it returns <code>undefined</code></li>
    </ul>
    <p>For more information on this method, see the discussion for <code><a href="/trigger/">.trigger()</a></code>.</p>
    <div class="warning"><strong>Note:</strong> Like <code>.trigger()</code>, if a triggered event name matches the name of a property on the object, prefixed by <code>on</code> (like, triggering <code>click</code> on <code>window</code> that has a non null <code>onclick</code> method), jQuery will attempt to invoke the property as a method.</div>
  </longdesc>
  <example>
    <desc>If you called .triggerHandler() on a focus event - the browser's default focus action would not be triggered, only the event handlers bound to the focus event.</desc>
    <code><![CDATA[
$( "#old" ).click(function() {
  $( "input" ).trigger( "focus" );
});
$( "#new" ).click(function() {
  $( "input" ).triggerHandler( "focus" );
});
$( "input" ).focus(function() {
  $( "<span>Focused!</span>" ).appendTo( "body" ).fadeOut( 1000 );
});
]]></code>
    <html><![CDATA[
<button id="old">.trigger( "focus" )</button>
<button id="new">.triggerHandler( "focus" )</button><br><br>

<input type="text" value="To Be Focused">
]]></html>
  </example>
  <category slug="events/event-handler-attachment"/>
  <category slug="version/1.2"/>
</entry>
