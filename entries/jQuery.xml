<?xml version="1.0"?>
<entries>
  <desc>Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string.</desc>
  <entry type="method" name="jQuery" return="jQuery">
    <title>jQuery()</title>
    <signature>
      <added>1.0</added>
      <argument name="selector" type="Selector">
        <desc>A string containing a selector expression</desc>
      </argument>
      <argument name="context" optional="true">
        <type name="Element"/>
        <type name="jQuery"/>
        <desc>A DOM Element, Document, or jQuery to use as context</desc>
      </argument>
    </signature>
    <signature>
      <added>1.0</added>
      <argument name="element" type="Element">
        <desc>A DOM element to wrap in a jQuery object.</desc>
      </argument>
    </signature>
    <signature>
      <added>1.0</added>
      <argument name="elementArray" type="Array">
        <desc>An array containing a set of DOM elements to wrap in a jQuery object.</desc>
      </argument>
    </signature>
    <signature>
      <added>1.0</added>
      <argument name="object" type="PlainObject">
        <desc>A plain object to wrap in a jQuery object.</desc>
      </argument>
    </signature>
    <signature>
      <added>1.0</added>
      <argument name="selection" type="jQuery">
        <desc>An existing jQuery object to clone.</desc>
      </argument>
    </signature>
    <signature>
      <added>1.4</added>
    </signature>
    <desc>Accepts a string containing a CSS selector which is then used to match a set of elements.</desc>
    <longdesc>
      <p>In the first formulation listed above,  <code>jQuery()</code> &#x2014; which can also be written as <code>$()</code> &#x2014; searches through the DOM for any elements that match the provided selector and creates a new jQuery object that references these elements:</p>
      <pre><code>$( "div.foo" );</code></pre>
      <p>If no elements match the provided selector, the new jQuery object is "empty"; that is, it contains no elements and has <code><a href="/length/">.length</a></code> property of 0.</p>
      <h4 id="selector-context">Selector Context</h4>
      <p>By default, selectors perform their searches within the DOM starting at the document root. However, an alternate context can be given for the search by using the optional second parameter to the <code>$()</code> function. For example, to do a search within an event handler, the search can be restricted like so:</p>
      <pre><code>
$( "div.foo" ).click(function() {
  $( "span", this ).addClass( "bar" );
});
      </code></pre>
      <p>When the search for the span selector is restricted to the context of <code>this</code>, only spans within the clicked element will get the additional class.</p>
      <p>Internally, selector context is implemented with the <code>.find()</code> method, so  <code>$( "span", this )</code> is equivalent to  <code>$( this ).find( "span" )</code>.</p>

      <h4 id="using-dom-elements">Using DOM elements</h4>
      <p>The second and third formulations of this function create a jQuery object using one or more DOM elements that were already selected in some other way. A jQuery object is created from the array elements in the order they appeared in the array; unlike most other multi-element jQuery operations, the elements are not sorted in DOM order. Elements will be copied from the array as-is and won't be unwrapped if they're already jQuery collections.</p>
      <p>Please note that although you can pass text nodes and comment nodes into a jQuery collection this way, most operations don't support them. The few that do will have an explicit note on their API documentation page.</p>
      <p>A common use of single-DOM-element construction is to call jQuery methods on an element that has been passed to a callback function through the keyword <code>this</code>:</p>
      <pre><code>
$( "div.foo" ).click(function() {
  $( this ).slideUp();
});
      </code></pre>
      <p>This example causes elements to be hidden with a sliding animation when clicked. Because the handler receives the clicked item in the <code>this</code> keyword as a bare DOM element, the element must be passed to the <code>$()</code> function before applying jQuery methods to it.</p>
      <p>XML data returned from an Ajax call can be passed to the <code>$()</code> function so individual elements of the XML structure can be retrieved using <code>.find()</code> and other DOM traversal methods.</p>
      <pre><code>
$.post( "url.xml", function( data ) {
  var $child = $( data ).find( "child" );
});
      </code></pre>

      <h4 id="cloning-jquery-objects">Cloning jQuery Objects</h4>
      <p>When a jQuery object is passed to the <code>$()</code> function, a clone of the object is created. This new jQuery object references the same DOM elements as the initial one.</p>

      <h4 id="returning-empty-set">Returning an Empty Set</h4>
      <p>As of jQuery 1.4, calling the <code>jQuery()</code> method with <em>no arguments</em> returns an empty jQuery set (with a <code><a href="/length/">.length</a></code> property of 0). In previous versions of jQuery, this would return a set containing the document node.</p>
      <h4 id="working-with-plain-objects">Working With Plain Objects</h4>
      <p>At present, the only operations supported on plain JavaScript objects wrapped in jQuery are: <code>.data()</code>,<code>.prop()</code>,<code>.on()</code>, <code>.off()</code>, <code>.trigger()</code> and <code>.triggerHandler()</code>. The use of <code>.data()</code> (or any method requiring <code>.data()</code>) on a plain object will result in a new property on the object called jQuery{randomNumber} (eg. jQuery123456789).</p>
      <pre><code>
// Define a plain object
var foo = { foo: "bar", hello: "world" };

// Pass it to the jQuery function
var $foo = $( foo );

// Test accessing property values
var test1 = $foo.prop( "foo" ); // bar

// Test setting property values
$foo.prop( "foo", "foobar" );
var test2 = $foo.prop( "foo" ); // foobar

// Test using .data() as summarized above
$foo.data( "keyName", "someValue" );
console.log( $foo ); // will now contain a jQuery{randomNumber} property

// Test binding an event name and triggering
$foo.on( "eventName", function () {
  console.log( "eventName was called" );
});

$foo.trigger( "eventName" ); // Logs "eventName was called"
      </code></pre>
      <p>Should <code>.trigger( "eventName" )</code> be used, it will search for an "eventName" property on the object and attempt to execute it after any attached jQuery handlers are executed. It does not check whether the property is a function or not. To avoid this behavior, <code>.triggerHandler( "eventName" )</code> should be used instead.</p>
      <pre><code>
$foo.triggerHandler( "eventName" ); // Also logs "eventName was called"
      </code></pre>
    </longdesc>
    <example>
      <desc>Find all p elements that are children of a div element and apply a border to them.</desc>
      <code><![CDATA[
$( "div > p" ).css( "border", "1px solid gray" );
]]></code>
      <html><![CDATA[
<p>one</p>
<div><p>two</p></div>
<p>three</p>
]]></html>
    </example>
    <example>
      <desc>Find all inputs of type radio within the first form in the document.</desc>
      <code><![CDATA[
$( "input:radio", document.forms[ 0 ] );
]]></code>
    </example>
    <example>
      <desc>Find all div elements within an XML document from an Ajax response.</desc>
      <code><![CDATA[
$( "div", xml.responseXML );
]]></code>
    </example>
    <example>
      <desc>Set the background color of the page to black.</desc>
      <code><![CDATA[
$( document.body ).css( "background", "black" );
]]></code>
    </example>
    <example>
      <desc>Hide all the input elements within a form.</desc>
      <code><![CDATA[
$( myForm.elements ).hide();
]]></code>
    </example>
    <category slug="core"/>
    <category slug="version/1.0"/>
    <category slug="version/1.4"/>
  </entry>
  <entry type="method" name="jQuery" return="jQuery">
    <signature>
      <added>1.0</added>
      <argument name="html" type="htmlString">
        <desc>A string of HTML to create on the fly. Note that this parses HTML, <strong>not</strong> XML.</desc>
      </argument>
      <argument name="ownerDocument" optional="true" type="document">
        <desc>A document in which the new elements will be created.</desc>
      </argument>
    </signature>
    <signature>
      <added>1.4</added>
      <argument name="html" type="htmlString">
        <desc>A string defining a single, standalone, HTML element (e.g. &lt;div/&gt; or &lt;div&gt;&lt;/div&gt;).</desc>
      </argument>
      <argument name="attributes" type="PlainObject">
        <desc>An object of attributes, events, and methods to call on the newly-created element.</desc>
      </argument>
    </signature>
    <desc>Creates DOM elements on the fly from the provided string of raw HTML.</desc>
    <longdesc>
      <h4 id="creating-new-elements">Creating New Elements</h4>
      <p>If a string is passed as the parameter to <code>$()</code>, jQuery examines the string to see if it looks like HTML (i.e., it starts with <code>&lt;tag ... &gt;</code>). If not, the string is interpreted as a selector expression, as explained above. But if the string appears to be an HTML snippet, jQuery attempts to create new DOM elements as described by the HTML. Then a jQuery object is created and returned that refers to these elements. You can perform any of the usual jQuery methods on this object:</p>
      <pre><code>$( "&lt;p id='test'&gt;My &lt;em&gt;new&lt;/em&gt; text&lt;/p&gt;" ).appendTo( "body" );</code></pre>
      <p>For explicit parsing of a string to HTML, use the <a href="/jQuery.parseHTML/">$.parseHTML()</a> method.</p>
      <p>By default, elements are created with an <code>.ownerDocument</code> matching the document into which the jQuery library was loaded. Elements being injected into a different document should be created using that document, e.g., <code>$("&lt;p&gt;hello iframe&lt;/p&gt;", $("#myiframe").prop("contentWindow").document)</code>.</p>
      <p>If the HTML is more complex than a single tag without attributes, as it is in the above example, the actual creation of the elements is handled by the browser's <code>.innerHTML</code> mechanism. In most cases, jQuery creates a new <code>&lt;div&gt;</code> element and sets the <code>innerHTML</code> property of the element to the HTML snippet that was passed in. When the parameter has a single tag (with optional closing tag or quick-closing) — <code>$( "&lt;img&#xA0;/&gt;" )</code> or <code>$( "&lt;img&gt;" )</code>, <code>$( "&lt;a&gt;&lt;/a&gt;" )</code> or <code>$( "&lt;a&gt;" )</code> — jQuery creates the element using the native JavaScript <code>.createElement()</code> function.</p>
      <p>When passing in complex HTML, some browsers may not generate a DOM that exactly replicates the HTML source provided. As mentioned, jQuery uses the browser's <code>.innerHTML</code> property to parse the passed HTML and insert it into the current document. During this process, some browsers filter out certain elements such as <code>&lt;html&gt;</code>, <code>&lt;title&gt;</code>, or <code>&lt;head&gt;</code> elements. As a result, the elements inserted may not be representative of the original string passed.</p>
      <p>Filtering isn't, however, limited to these tags. For example, Internet Explorer prior to version 8 will also convert all <code>href</code> properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate <a href="http://code.google.com/p/html5shiv/">compatibility layer</a>.</p>
      <p>To ensure cross-platform compatibility, the snippet must be well-formed. Tags that can contain other elements should be paired with a closing tag:</p>
      <pre><code>$( "&lt;a href='http://jquery.com'&gt;&lt;/a&gt;" );</code></pre>
      <p>Tags that cannot contain elements may be quick-closed or not:</p>
      <pre><code>
$( "&lt;img&gt;" );
$( "&lt;input&gt;" );
      </code></pre>
      <p>When passing HTML to <code>jQuery()</code>, note that text nodes are not treated as DOM elements. With the exception of a few methods (such as <code>.content()</code>), they are generally ignored or removed. E.g:</p>
      <pre><code>
var el = $( "&lt;br&gt;2&lt;br&gt;3" ); // returns [&lt;br&gt;, "2", &lt;br&gt;]
el = $( "&lt;br&gt;2&lt;br&gt;3 &gt;" ); // returns [&lt;br&gt;, "2", &lt;br&gt;, "3 &amp;gt;"]
      </code></pre>
      <p>This behavior is expected. <strong>As of jQuery 1.9.0</strong> (and unless using the <a href="https://github.com/jquery/jquery-migrate/#readme">jQuery Migrate plugin</a>), <code>jQuery()</code> requires the HTML string to start with a <code>&lt;</code> (i.e text nodes cannot appear at the front of the HTML string).</p>
      <p><strong>As of jQuery 1.4</strong>, the second argument to <code>jQuery()</code> can accept a plain object consisting of a superset of the properties that can be passed to the <a href="/attr/">.attr()</a> method.</p>
      <p><strong>Important:</strong> If the second argument is passed, the HTML string in the first argument must represent a simple element with no attributes. <strong>As of jQuery 1.4</strong>, any <a href="/category/events/">event type</a> can be passed in, and the following jQuery methods can be called: <a href="/val/">val</a>, <a href="/css/">css</a>, <a href="/html/">html</a>, <a href="/text/">text</a>, <a href="/data/">data</a>, <a href="/width/">width</a>, <a href="/height/">height</a>, or <a href="/offset/">offset</a>.</p>
      <p><strong>As of jQuery 1.8</strong>, any jQuery instance method (a method of <code>jQuery.fn</code>) can be used as a property of the object passed to the second parameter:</p>
      <pre><code>
$( "<div></div>", {
  "class": "my-div",
  on: {
    touchstart: function( event ) {
      // Do something
    }
  }
}).appendTo( "body" );
      </code></pre>
      <p>The name <code>"class"</code> must be quoted in the object since it is a JavaScript reserved word, and <code>"className"</code> cannot be used since it refers to the DOM property, not the attribute. </p>
      <p>While the second argument is convenient, its flexibility can lead to unintended consequences (e.g. <code>$( "&lt;input&gt;", {size: "4"} )</code> calling the <code>.size()</code> method instead of setting the size attribute). The previous code block could thus be written instead as:</p>
<pre><code>
$( "<div></div>" )
  .addClass( "my-div" )
  .on({
    touchstart: function( event ) {
      // Do something
    }
  })
    .appendTo( "body" );
      </code></pre>
    </longdesc>
    <example>
      <desc>Create a div element (and all of its contents) dynamically and append it to the body element. Internally, an element is created and its innerHTML property set to the given markup.</desc>
      <code><![CDATA[
$( "<div><p>Hello</p></div>" ).appendTo( "body" )
]]></code>
    </example>
    <example>
      <desc>Create some DOM elements.</desc>
      <code><![CDATA[
$( "<div/>", {
  "class": "test",
  text: "Click me!",
  click: function() {
    $( this ).toggleClass( "test" );
  }
})
  .appendTo( "body" );
]]></code>
    </example>
    <category slug="core"/>
    <category slug="version/1.0"/>
    <category slug="version/1.4"/>
  </entry>
  <entry type="method" name="jQuery" return="jQuery">
    <signature>
      <added>1.0</added>
      <argument name="callback" type="Function">
        <desc>The function to execute when the DOM is ready.</desc>
      </argument>
    </signature>
    <desc>Binds a function to be executed when the DOM has finished loading.</desc>
    <longdesc>
      <p>This function behaves just like <code>$( document ).ready()</code>, in that it should be used to wrap other <code>$()</code> operations on your page that depend on the DOM being ready. While this function is, technically, chainable, there really isn't much use for chaining against it.</p>
    </longdesc>
    <example>
      <desc>Execute the function when the DOM is ready to be used.</desc>
      <code><![CDATA[
$(function() {
  // Document is ready
});
]]></code>
    </example>
    <example>
      <desc>Use both the shortcut for $(document).ready() and the argument to write failsafe jQuery code using the $ alias, without relying on the global alias.</desc>
      <code><![CDATA[
jQuery(function( $ ) {
  // Your code using failsafe $ alias here...
});
]]></code>
    </example>
    <category slug="core"/>
    <category slug="version/1.0"/>
    <category slug="version/1.4"/>
  </entry>
</entries>
