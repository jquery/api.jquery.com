<?xml version="1.0"?>
<entries>
  <desc>Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element.</desc>
  <entry type="method" name="prop">
    <return type="String"/>
    <return type="Boolean"/>
    <title>.prop()</title>
    <signature>
      <added>1.6</added>
      <argument name="propertyName" type="String">
        <desc>The name of the property to get.</desc>
      </argument>
    </signature>
    <desc>Get the value of a property for the first element in the set of matched elements.</desc>
    <longdesc>
      <p>The <code>.prop()</code> method gets the property value for only the <em>first</em> element in the matched set. It returns <code>undefined</code> for the value of a property that has not been set, or if the matched set has no elements. To get the value for each element individually, use a looping construct such as jQuery's <code>.each()</code> or <code>.map()</code> method.</p>
	  <div class="warning">
        <p><strong>Note:</strong> Attempting to change the <code>type</code> property (or attribute) of an <code>input</code> element created via HTML or already in an HTML document will result in an error being thrown by Internet Explorer 6, 7, or 8.</p>
      </div>
      <h4>Attributes vs. Properties</h4>
      <p>The difference between <em>attributes</em> and <em>properties</em> can be important in specific situations. <strong>Before jQuery 1.6</strong>, the <code><a href="http://api.jquery.com/attr/">.attr()</a></code> method sometimes took property values into account when retrieving some attributes, which could cause inconsistent behavior. <strong>As of jQuery 1.6</strong>, the <code>.prop()</code> method provides a way to explicitly retrieve property values, while <code>.attr()</code> retrieves attributes.</p>
      <p>For example, <code>selectedIndex</code>, <code>tagName</code>, <code>nodeName</code>, <code>nodeType</code>, <code>ownerDocument</code>, <code>defaultChecked</code>, and <code>defaultSelected</code> should be retrieved and set with the <code>.prop()</code> method. Prior to jQuery 1.6, these properties were retrievable with the <code>.attr()</code> method, but this was not within the scope of <code>attr</code>. These do not have corresponding attributes and are only properties.</p>
      <p>Concerning boolean attributes, consider a DOM element defined by the HTML markup <code>&lt;input type="checkbox" checked="checked" /&gt;</code>, and assume it is in a JavaScript variable named <code>elem</code>:</p>
      <table>
        <tr>
          <th>
            <code>elem.checked</code>
          </th>
          <td><code>true</code> (Boolean) Will change with checkbox state</td>
        </tr>
        <tr>
          <th>
            <code>$(elem).prop("checked")</code>
          </th>
          <td><code>true</code> (Boolean) Will change with checkbox state</td>
        </tr>
        <tr>
          <th>
            <code>elem.getAttribute("checked")</code>
          </th>
          <td><code>"checked"</code> (String) Initial state of the checkbox; does not change</td>
        </tr>
        <tr>
          <th>
            <code>$(elem).attr("checked")</code>
            <em>(1.6)</em>
          </th>
          <td><code>"checked"</code> (String) Initial state of the checkbox; does not change</td>
        </tr>
        <tr>
          <th>
            <code>$(elem).attr("checked")</code>
            <em>(1.6.1+)</em>
          </th>
          <td><code>"checked"</code> (String) Will change with checkbox state</td>
        </tr>
        <tr>
          <th>
            <code>$(elem).attr("checked")</code>
            <em>(pre-1.6)</em>
          </th>
          <td><code>true</code> (Boolean) Changed with checkbox state</td>
        </tr>
      </table>
      <br/>
      <p>According to the <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.4">W3C forms specification</a>, the <code>checked</code> attribute is a <em><a href="http://www.w3.org/TR/html4/intro/sgmltut.html#h-3.3.4.2">boolean attribute</a></em>, which means the corresponding property is <strong>true</strong> if the attribute is present at all&#x2014;even if, for example, the attribute has no value or is set to empty string value or even "false". This is true of all boolean attributes.</p>
      <p>Nevertheless, the most important concept to remember about the <code>checked</code> attribute is that it does not correspond to the <code>checked</code> property. The attribute actually corresponds to the <code>defaultChecked</code> property and should be used only to set the <em>initial</em> value of the checkbox. The <code>checked</code> attribute value does not change with the state of the checkbox, while the <code>checked</code> property does. Therefore, the cross-browser-compatible way to determine if a checkbox is checked is to use the property:</p>
      <ul>
        <li>
          <code>if ( elem.checked )</code>
        </li>
        <li>
          <code>if ( $(elem).prop("checked") )</code>
        </li>
        <li>
          <code>if ( $(elem).is(":checked") )</code>
        </li>
      </ul>
      <p>The same is true for other dynamic attributes, such as <code>selected</code> and <code>value</code>.</p>
    </longdesc>
    <note id="prop-memory-leaks" type="additional"/>
    <example>
      <desc>Display the checked property and attribute of a checkbox as it changes.</desc>
      <code><![CDATA[
$("input").change(function() {
  var $input = $(this);
  $("p").html(".attr('checked'): <b>" + $input.attr('checked') + "</b><br>"
              + ".prop('checked'): <b>" + $input.prop('checked') + "</b><br>"
              + ".is(':checked'): <b>" + $input.is(':checked') ) + "</b>";
}).change();
]]></code>
      <css><![CDATA[
  p { margin: 20px 0 0 }
  b { color: blue; }
]]></css>
      <html><![CDATA[
<input id="check1" type="checkbox" checked="checked">
<label for="check1">Check me</label>
<p></p>
]]></html>
    </example>
    <category slug="attributes"/>
    <category slug="manipulation/general-attributes"/>
    <category slug="version/1.6"/>
  </entry>
  <entry type="method" name="prop" return="jQuery">
    <signature>
      <added>1.6</added>
      <argument name="propertyName" type="String">
        <desc>The name of the property to set.</desc>
      </argument>
      <argument name="value">
        <type name="String"/>
        <type name="Number"/>
        <type name="Boolean"/>
        <desc>A value to set for the property.</desc>
      </argument>
    </signature>
    <signature>
      <added>1.6</added>
      <argument name="properties" type="PlainObject">
        <desc>An object of property-value pairs to set.</desc>
      </argument>
    </signature>
    <signature>
      <added>1.6</added>
      <argument name="propertyName" type="String">
        <desc>The name of the property to set.</desc>
      </argument>
      <argument name="function(index, oldPropertyValue)" type="Function">
        <desc>A function returning the value to set. Receives the index position of the element in the set and the old property value as arguments. Within the function, the keyword <code>this</code> refers to the current element.</desc>
      </argument>
    </signature>
    <desc>Set one or more properties for the set of matched elements.</desc>
    <longdesc>
      <p>The <code>.prop()</code> method is a convenient way to set the value of properties&#x2014;especially when setting multiple properties, using values returned by a function, or setting values on multiple elements at once. It should be used when setting <code>selectedIndex</code>, <code>tagName</code>, <code>nodeName</code>, <code>nodeType</code>, <code>ownerDocument</code>, <code>defaultChecked</code>, or <code>defaultSelected</code>. Since jQuery 1.6, these properties can no longer be set with the <code>.attr()</code> method. They do not have corresponding attributes and are only properties.</p>
      <p>Properties generally affect the dynamic state of a DOM element without changing the serialized HTML attribute. Examples include the <code>value</code> property of input elements, the <code>disabled</code> property of inputs and buttons, or the <code>checked</code> property of a checkbox. The <code>.prop()</code> method should be used to set disabled and checked instead of the <code><a href="http://api.jquery.com/attr">.attr()</a></code> method. The <code><a href="http://api.jquery.com/val">.val()</a></code> method should be used for getting and setting value.</p>
      <pre><code>
$("input").prop("disabled", false);
$("input").prop("checked", true);
$("input").val("someValue");
</code></pre>
      <p><strong>Important:</strong> the <code><a href="http://api.jquery.com/removeProp">.removeProp()</a></code> method should not be used to set these properties to false. Once a native property is removed, it cannot be added again. See <code><a href="http://api.jquery.com/removeProp">.removeProp()</a></code> for more information.</p>
      <h4 id="computed-prop-values">Computed property values</h4>
      <p>By using a function to set properties, you can compute the value based on other properties of the element. For example, to toggle all checkboxes based off their individual values:</p>
      <pre><code>$("input[type='checkbox']").prop("checked", function( i, val ) {
  return !val;
});</code></pre>
      <p><strong>Note: </strong>If nothing is returned in the setter function (ie. <code>function(index, prop){})</code>, or if <code>undefined</code> is returned, the current value is not changed. This is useful for selectively setting values only when certain criteria are met.</p>
    </longdesc>
    <note id="prop-memory-leaks" type="additional"/>
    <example>
      <desc>Disable all checkboxes on the page.</desc>
      <code><![CDATA[
$("input[type='checkbox']").prop({
  disabled: true
});
]]></code>
      <css><![CDATA[
  img { padding:10px; }
  div { color:red; font-size:24px; }
]]></css>
      <html><![CDATA[
  <input type="checkbox" checked="checked" />
  <input type="checkbox" />
  <input type="checkbox" />
  <input type="checkbox"  checked="checked" />
]]></html>
    </example>
    <category slug="attributes"/>
    <category slug="manipulation/general-attributes"/>
    <category slug="version/1.6"/>
  </entry>
</entries>
