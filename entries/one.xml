<?xml version="1.0"?>
<entry type="method" name="one" return="jQuery">
  <title>.one()</title>
  <desc>Attach a handler to an event for the elements. The handler is executed at most once per element per event type.</desc>
  <signature>
    <added>1.1</added>
    <argument name="events" type="String">
      <desc>A string containing one or more JavaScript event types, such as "click" or "submit," or custom event names.</desc>
    </argument>
    <argument name="data" type="PlainObject" optional="true">
      <desc>An object containing data that will be passed to the event handler.</desc>
    </argument>
    <argument name="handler" type="Function">
      <desc>A function to execute at the time the event is triggered.</desc>
      <argument name="eventObject" type="Event" />
    </argument>
  </signature>
  <signature>
    <added>1.7</added>
    <argument name="events" type="String">
      <desc>One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".</desc>
    </argument>
    <argument name="selector" type="String" optional="true">
      <desc>A selector string to filter the descendants of the selected elements that trigger the event. If the selector is <code>null</code> or omitted, the event is always triggered when it reaches the selected element.</desc>
    </argument>
    <argument name="data" type="Anything" optional="true">
      <desc>Data to be passed to the handler in <a href="/event.data/"><code>event.data</code></a> when an event is triggered.</desc>
    </argument>
    <argument name="handler" type="Function">
      <desc>A function to execute when the event is triggered. The value <code>false</code> is also allowed as a shorthand for a function that simply does <code>return false</code>.</desc>
      <argument name="eventObject" type="Event" />
    </argument>
  </signature>
  <signature>
    <added>1.7</added>
    <argument name="events" type="PlainObject">
      <desc>An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).</desc>
    </argument>
    <argument name="selector" type="String" optional="true">
      <desc>A selector string to filter the descendants of the selected elements that will call the handler. If the selector is null or omitted, the handler is always called when it reaches the selected element.</desc>
    </argument>
    <argument name="data" type="Anything" optional="true">
      <desc>Data to be passed to the handler in <a href="/event.data/"><code>event.data</code></a> when an event occurs.</desc>
    </argument>
  </signature>
  <longdesc>
    <p>The  <code>.one()</code> method is identical to  <code>.on()</code>, except that the handler is unbound after its first invocation. For example:</p>
    <pre><code>
$( "#foo" ).one( "click", function() {
  alert( "This will be displayed only once." );
});
    </code></pre>
    <p>After the code is executed, a click on the element with ID <code>foo</code> will display the alert. Subsequent clicks will do nothing. This code is equivalent to:</p>
    <pre><code>
$( "#foo" ).on( "click", function( event ) {
  alert( "This will be displayed only once." );
  $( this ).off( event );
});
    </code></pre>
    <p>In other words, explicitly calling <code>.off()</code> from within a regularly-bound handler has exactly the same effect.</p>
    <p>If the first argument contains more than one space-separated event types, the event handler is called <em>once for each event type</em>.</p>
  </longdesc>
  <example>
    <desc>Tie a one-time click to each div.</desc>
    <code><![CDATA[
var n = 0;
$( "div" ).one( "click", function() {
  var index = $( "div" ).index( this );
  $( this ).css({
    borderStyle: "inset",
    cursor: "auto"
  });
  $( "p" ).text( "Div at index #" + index + " clicked." +
    " That's " + (++n) + " total clicks." );
});
]]></code>
    <css><![CDATA[
  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    background: green;
    border: 10px outset;
    cursor:pointer;
  }
  p {
    color: red;
    margin: 0;
    clear: left;
  }
]]></css>
    <html><![CDATA[
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<p>Click a green square...</p>
]]></html>
  </example>
  <example>
    <desc>To display the text of all paragraphs in an alert box the first time each of them is clicked:</desc>
    <code><![CDATA[
$( "p" ).one( "click", function() {
  alert( $( this ).text() );
});
]]></code>
  </example>
  <example>
    <desc>Event handlers will trigger once per element per event type</desc>
    <code><![CDATA[
var n = 0;
$(".target").one("click mouseenter", function() {
  $(".count").html(++n);
});
]]></code>
    <html><![CDATA[
<div class="count">0</div>
<div class="target">Hover/click me</div>
]]></html>
  </example>
  <category slug="events/event-handler-attachment"/>
  <category slug="version/1.1"/>
</entry>
