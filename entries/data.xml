<?xml version="1.0"?>
<entries>
  <desc>Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements.</desc>
  <entry type="method" name="data" return="jQuery">
    <title>.data()</title>
    <signature>
      <added>1.2.3</added>
      <argument name="key" type="String">
        <desc>A string naming the piece of data to set.</desc>
      </argument>
      <argument name="value" type="Anything">
        <desc>The new data value; this can be any Javascript type except <code>undefined</code>.</desc>
      </argument>
    </signature>
    <signature>
      <added>1.4.3</added>
      <argument name="obj" type="Object">
        <desc>An object of key-value pairs of data to update.</desc>
      </argument>
    </signature>
    <desc>Store arbitrary data associated with the matched elements.</desc>
    <longdesc>
      <p>The <code>.data()</code> method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks.</p>
      <p>We can set several distinct values for a single element and retrieve them later:</p>
      <pre><code>
$( "body" ).data( "foo", 52 );
$( "body" ).data( "bar", { isManual: true } );
$( "body" ).data( { baz: [ 1, 2, 3 ] } );
$( "body" ).data( "foo" ); // 52
$( "body" ).data(); // { foo: 52, bar: { isManual: true }, baz: [ 1, 2, 3 ] }
      </code></pre>
      <p>Using the <code>data()</code> method to update data does not affect attributes in the DOM. To set a <code>data-*</code> attribute value, use <code><a href="/attr/">attr</a></code>.</p>
      <p>Prior to jQuery 1.4.3, <code>.data( obj )</code> completely replaced all data. Since jQuery 1.4.3, data is instead extended by shallow merge.</p>
      <p>Since <strong>jQuery 3</strong>, every two-character sequence of "-" (U+002D) followed by a lowercase ASCII letter in a key is replaced by the uppercase version of the letter, in alignment with the <a href="https://html.spec.whatwg.org/multipage/dom.html#dom-dataset">HTML dataset API</a>. A statement like <code>$( "body" ).data( { "my-name": "aValue" } ).data();</code> will return <code>{ myName: "aValue" }</code>.</p>
      <p>Due to the way browsers interact with plugins and external code, the <code>.data()</code> method cannot be used on <code>&lt;object&gt;</code> (unless it's a Flash plugin), <code>&lt;applet&gt;</code> or <code>&lt;embed&gt;</code> elements.</p>
    </longdesc>
    <note id="no-data-on-xml" type="additional"/>
    <note id="data-doesnt-accept-undefined" type="additional" data-title=".data" data-parameters="&quot;name&quot;"/>
    <example>
      <desc>Store then retrieve a value from the div element.</desc>
      <code><![CDATA[
$( "div" ).data( "test", { first: 16, last: "pizza!" } );
$( "span" ).first().text( $( "div" ).data( "test" ).first );
$( "span" ).last().text( $( "div" ).data( "test" ).last );
]]></code>
      <css><![CDATA[
  div {
    color: blue;
  }
  span {
    color: red;
  }
]]></css>
      <html><![CDATA[
<div>
  The values stored were
  <span></span>
  and
  <span></span>
</div>
]]></html>
    </example>
    <category slug="data"/>
    <category slug="miscellaneous/data-storage"/>
    <category slug="version/1.2.3"/>
    <category slug="version/1.4"/>
    <category slug="version/1.4.3"/>
  </entry>
  <entry type="method" name="data" return="Object">
    <signature>
      <added>1.2.3</added>
      <argument name="key" type="String">
        <desc>Name of the data stored.</desc>
      </argument>
    </signature>
    <signature>
      <added>1.4</added>
    </signature>
    <desc>Return arbitrary data associated with the first element in the jQuery collection, as set by data() or by an HTML5 <code>data-*</code> attribute.</desc>
    <longdesc>
      <p>The <code>.data()</code> method allows us to read data previously associated with DOM elements. We can retrieve several distinct values for a single element one at a time, or as a set:</p>
      <pre><code>
var elem = document.createElement( "span" );
$( elem ).data( "foo" ); // undefined
$( elem ).data(); // {}

$( elem ).data( "foo", 42 );
$( elem ).data( "foo" ); // 42
$( elem ).data(); // { foo: 42 }
      </code></pre>
      <p>Calling <code>.data()</code> with no parameters returns a JavaScript object containing each stored value as a property. The object can be used directly to get data values (but note that property names originally containing dashes will have been modified as described below).</p>
      <p>Since <strong>jQuery 3</strong>, every two-character sequence of "-" (U+002D) followed by a lowercase ASCII letter in a key is replaced by the uppercase version of the letter, in alignment with the <a href="https://html.spec.whatwg.org/multipage/dom.html#dom-dataset">HTML dataset API</a>. A statement like <code>$( "body" ).data( { "my-name": "aValue" } ).data();</code> will return <code>{ myName: "aValue" }</code>.</p>
      <h4 id="data-html5">
        <a href="#data-html5">HTML5 <code>data-*</code> Attributes</a>
      </h4>
      <p>Since jQuery 1.4.3, <a href="https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes"><code>data-*</code> attributes</a> are used to initialize jQuery data. An element's <code>data-*</code> attributes are retrieved the first time the <code>data()</code> method is invoked upon it, and then are no longer accessed or mutated (all values are stored internally by jQuery).</p>
      <p>Every attempt is made to convert the attribute's string value to a JavaScript value (this includes booleans, numbers, objects, arrays, and null). A string is only converted to a number if doing so doesn't change its representation (for example, the string "100" is converted to the number 100, but "1E02" and "100.000" are left as strings because their numeric value of 100 serializes to "100"). When a string starts with '{' or '[', then <code>jQuery.parseJSON</code> is used to parse it; it must follow <a href="https://en.wikipedia.org/wiki/JSON#Data_types.2C_syntax_and_example">valid JSON syntax</a> <em>including quoted property names</em>. A string not parseable as a JavaScript value is not converted.</p>
      <p>To retrieve a <code>data-*</code> attribute value as an unconverted string, use the <code><a href="/attr/">attr()</a></code> method.</p>
      <p>Since jQuery 1.6, dashes in <code>data-*</code> attribute names have been processed in alignment with the <a href="https://html.spec.whatwg.org/multipage/dom.html#dom-dataset">HTML dataset API</a>.</p>
      <p>For example, given the following HTML:</p>
      <pre><code>&lt;div data-role="page" data-last-value="43" data-hidden="true" data-options='{"name":"John"}'&gt;&lt;/div&gt;</code></pre>
      <p>The following comparisons are all true:</p>
      <pre><code>
$( "div" ).data( "role" ) === "page";
$( "div" ).data( "lastValue" ) === 43;
$( "div" ).data( "hidden" ) === true;
$( "div" ).data( "options" ).name === "John";
      </code></pre>
    </longdesc>
    <note id="no-data-on-xml" type="additional"/>
    <example>
      <desc>Get the data named "blah" stored at for an element.</desc>
      <code><![CDATA[
$( "button" ).click(function() {
  var value;

  switch ( $( "button" ).index( this ) ) {
    case 0 :
      value = $( "div" ).data( "blah" );
      break;
    case 1 :
      $( "div" ).data( "blah", "hello" );
      value = "Stored!";
      break;
    case 2 :
      $( "div" ).data( "blah", 86 );
      value = "Stored!";
      break;
    case 3 :
      $( "div" ).removeData( "blah" );
      value = "Removed!";
      break;
  }

  $( "span" ).text( "" + value );
});
]]></code>
      <css><![CDATA[
  div {
    margin: 5px;
    background: yellow;
  }
  button {
    margin: 5px;
    font-size: 14px;
  }
  p {
    margin: 5px;
    color: blue;
  }
  span {
    color: red;
  }
]]></css>
      <html><![CDATA[
<div>A div</div>
<button>Get "blah" from the div</button>
<button>Set "blah" to "hello"</button>
<button>Set "blah" to 86</button>
<button>Remove "blah" from the div</button>
<p>The "blah" value of this div is <span>?</span></p>
]]></html>
    </example>
    <category slug="data"/>
    <category slug="miscellaneous/data-storage"/>
    <category slug="version/1.2.3"/>
    <category slug="version/1.4"/>
    <category slug="version/1.4.3"/>
  </entry>
</entries>
