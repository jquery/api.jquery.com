<?xml version="1.0"?>
<entry type="method" name="siblings" return="jQuery">
  <title>.siblings()</title>
  <signature>
    <added>1.0</added>
    <argument name="selector" optional="true" type="Selector">
      <desc>A string containing a selector expression to match elements against.</desc>
    </argument>
  </signature>
  <desc>Get the siblings of each element in the set of matched elements, optionally filtered by a selector.</desc>
  <longdesc>
    <p>Given a jQuery object that represents a set of DOM elements, the <code>.siblings()</code> method allows us to search through the siblings of these elements in the DOM tree and construct a new jQuery object from the matching elements.</p>
    <p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p>
    <p>Consider a page with a simple list on it:</p>
    <pre><code>
&lt;ul&gt;
   &lt;li&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class="third-item"&gt;list item 3&lt;/li&gt;
   &lt;li&gt;list item 4&lt;/li&gt;
   &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
    </code></pre>
    <p>If we begin at the third item, we can find its siblings:</p>
    <pre><code>$('li.third-item').siblings().css('background-color', 'red');</code></pre>
    <p>The result of this call is a red background behind items 1, 2, 4, and 5. Since we do not supply a selector expression, all of the siblings are part of the object. If we had supplied one, only the matching items among these four would be included.</p>
    <p>The original element is not included among the siblings, which is important to remember when we wish to find all elements at a particular level of the DOM tree.</p>
  </longdesc>
  <example>
    <desc>Find the unique siblings of all yellow li elements in the 3 lists (including other yellow li elements if appropriate).</desc>
    <code><![CDATA[
var len = $(".hilite").siblings()
                      .css("color", "red")
                      .length;
$("b").text(len);
]]></code>
    <css><![CDATA[
  ul { float:left; margin:5px; font-size:16px; font-weight:bold; }
  p { color:blue; margin:10px 20px; font-size:16px; padding:5px;
      font-weight:bolder; }
  .hilite { background:yellow; }
]]></css>
    <html><![CDATA[<ul>
  <li>One</li>
  <li>Two</li>
  <li class="hilite">Three</li>
  <li>Four</li>
</ul>

<ul>
  <li>Five</li>
  <li>Six</li>
  <li>Seven</li>
</ul>
<ul>
  <li>Eight</li>
  <li class="hilite">Nine</li>
  <li>Ten</li>
  <li class="hilite">Eleven</li>
</ul>
<p>Unique siblings: <b></b></p>]]></html>
  </example>
  <example>
    <desc>Find all siblings with a class "selected" of each div.</desc>
    <code><![CDATA[$("p").siblings(".selected").css("background", "yellow");]]></code>
    <html><![CDATA[<div><span>Hello</span></div>

  <p class="selected">Hello Again</p>
  <p>And Again</p>]]></html>
  </example>
  <category slug="traversing/tree-traversal"/>
  <category slug="version/1.0"/>
</entry>