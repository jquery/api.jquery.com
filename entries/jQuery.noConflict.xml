<?xml version="1.0"?>
<entry type="method" name="jQuery.noConflict" return="Object">
  <title>jQuery.noConflict()</title>
  <signature>
    <added>1.0</added>
    <argument name="removeAll" type="Boolean" optional="true">
      <desc>A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).</desc>
    </argument>
  </signature>
  <desc><![CDATA[Relinquish jQuery's control of the <code>$</code> variable.]]></desc>
  <longdesc>
    <p>Many JavaScript libraries use <code> $</code> as a function or variable name, just as jQuery does. In jQuery's case, <code> $</code> is just an alias for <code>jQuery</code>, so all functionality is available without using <code> $</code>. If we need to use another JavaScript library alongside jQuery, we can return control of <code> $</code> back to the other library with a call to <code>$.noConflict()</code>:</p>
    <pre><code>
&lt;script type="text/javascript" src="other_lib.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
  $.noConflict();
  // Code that uses other library's $ can follow here.
&lt;/script&gt;
</code></pre>
    <p>This technique is especially effective in conjunction with the .ready() method's ability to alias the jQuery object, as within callback passed to .ready() we can use $ if we wish without fear of conflicts later:</p>
    <pre><code>
&lt;script type="text/javascript" src="other_lib.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
  $.noConflict();
  jQuery(document).ready(function($) {
    // Code that uses jQuery's $ can follow here.
  });
  // Code that uses other library's $ can follow here.
&lt;/script&gt;
</code></pre>
    <p>If necessary, we can free up the <code> jQuery</code> name as well by passing <code>true</code> as an argument to the method. This is rarely necessary, and if we must do this (for example, if we need to use multiple versions of the <code>jQuery</code> library on the same page), we need to consider that most plug-ins rely on the presence of the jQuery variable and may not operate correctly in this situation.</p>
  </longdesc>
  <example>
    <desc>Maps the original object that was referenced by $ back to $.</desc>
    <code><![CDATA[jQuery.noConflict();
// Do something with jQuery
jQuery("div p").hide();
// Do something with another library's $()
$("content").style.display = 'none';]]></code>
  </example>
  <example>
    <desc>Reverts the $ alias and then creates and executes a function to provide the $ as a jQuery alias inside the functions scope. Inside the function the original $ object is not available. This works well for most plugins that don't rely on any other library.
  </desc>
    <code><![CDATA[jQuery.noConflict();
(function($) {
  $(function() {
    // more code using $ as alias to jQuery
  });
})(jQuery);
// other code using $ as an alias to the other library]]></code>
  </example>
  <example>
    <desc>You can chain the jQuery.noConflict() with the shorthand ready for a compact code.</desc>
    <code><![CDATA[jQuery.noConflict()(function(){
    // code using jQuery
});
// other code using $ as an alias to the other library]]></code>
  </example>
  <example>
    <desc>Creates a different alias instead of jQuery to use in the rest of the script.</desc>
    <code><![CDATA[var j = jQuery.noConflict();
// Do something with jQuery
j("div p").hide();
// Do something with another library's $()
$("content").style.display = 'none';]]></code>
  </example>
  <example>
    <desc>Completely move jQuery to a new namespace in another object.</desc>
    <code><![CDATA[var dom = {};
dom.query = jQuery.noConflict(true);]]></code>
    <results><![CDATA[// Do something with the new jQuery
dom.query("div p").hide();
// Do something with another library's $()
$("content").style.display = 'none';
// Do something with another version of jQuery
jQuery("div > p").hide();]]></results>
  </example>
  <category slug="core"/>
  <category slug="miscellaneous/setup-methods"/>
  <category slug="version/1.0"/>
</entry>