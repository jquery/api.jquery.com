<?xml version="1.0"?>
<entries>
<desc>Bind an event handler to the "mouseup" event, or trigger that event on an element.</desc>

<entry type="method" name="on" return="jQuery">
  <title>mouseup event</title>
  <desc>Bind an event handler to the "mouseup" event.</desc>
  <signature>
    <added>1.7</added>
    <argument name="&quot;mouseup&quot;" type="string">
      <desc>The string <code>"mouseup"</code>.</desc>
    </argument>
    <argument name="eventData" type="Anything" optional="true">
      <desc>An object containing data that will be passed to the event handler.</desc>
    </argument>
    <argument name="handler" type="Function">
      <desc>A function to execute each time the event is triggered.</desc>
      <argument name="eventObject" type="Event" />
    </argument>
  </signature>
  <longdesc>
    <div class="warning">
      <p>This page describes the <code>mouseup</code> event. For the deprecated <code>.mouseup()</code> method, see <a href="/mouseup-shorthand/"><code>.mouseup()</code></a>.</p>
    </div>
    <p>The <code>mouseup</code> event is sent to an element when the mouse pointer is over the element, and the mouse button is released. Any HTML element can receive this event.</p>
    <p>For example, consider the HTML:</p>
    <pre><code>
&lt;div id="target"&gt;
  Click here
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
</code></pre>
    <figure>
      <img src="/resources/0042_05_02.png" alt=""/>
      <figcaption>Figure 1 - Illustration of the rendered HTML</figcaption>
    </figure>
    <p>The event handler can be bound to any <code>&lt;div&gt;</code>:</p>
    <pre><code>
$( "#target" ).on( "mouseup", function() {
  alert( "Handler for `mouseup` called." );
} );
    </code></pre>
    <p>Now if we click on this element, the alert is displayed:</p>
    <p>
      <samp>Handler for `mouseup` called.</samp>
    </p>
    <p>We can also trigger the event when a different element is clicked:</p>
    <pre><code>
$( "#other" ).on( "click", function() {
  $( "#target" ).trigger( "mouseup" );
} );
    </code></pre>
    <p>After this code executes, clicks on <samp>Trigger the handler</samp> will also alert the message.</p>
    <p>If the user clicks outside an element, drags onto it, and releases the button, this is still counted as a <code>mouseup</code> event. This sequence of actions is not treated as a button press in most user interfaces, so it is usually better to use the <code>click</code> event unless we know that the <code>mouseup</code> event is preferable for a particular situation.</p>
  </longdesc>
  <example>
    <desc>Show texts when mouseup and mousedown event triggering.</desc>
    <code><![CDATA[
$( "p" )
  .on( "mouseup", function() {
    $( this ).append( "<span style='color:#f00;'>Mouse up.</span>" );
  } )
  .on( "mousedown", function() {
    $( this ).append( "<span style='color:#00f;'>Mouse down.</span>" );
  } );
]]></code>
    <html><![CDATA[
<p>Press mouse and release here.</p>
]]></html>
  </example>
  <category slug="events/mouse-events"/>
  <category slug="version/1.0"/>
  <category slug="version/1.7"/>
</entry>

<entry type="method" name="trigger" return="jQuery">
  <title>mouseup event</title>
  <desc>Trigger the "mouseup" event on an element.</desc>
  <signature>
    <added>1.0</added>
    <argument name="&quot;mouseup&quot;" type="string">
      <desc>The string <code>"mouseup"</code>.</desc>
    </argument>
  </signature>
  <longdesc>
    <p>See the description for <a href="#on1"><code>.on( "mouseup", ... )</code></a>.</p>
  </longdesc>
  <category slug="events/mouse-events"/>
  <category slug="version/1.0"/>
</entry>

</entries>
