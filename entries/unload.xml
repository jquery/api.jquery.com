<?xml version="1.0"?>
<entry type="method" name="unload" return="jQuery" deprecated="1.8">
  <title>.unload()</title>
  <signature>
    <added>1.0</added>
    <argument name="handler" type="Function">
      <desc>A function to execute when the event is triggered.</desc>
      <argument name="eventObject" type="Event" />
    </argument>
  </signature>
  <signature>
    <added>1.4.3</added>
    <argument name="eventData" type="Anything" optional="true">
      <desc>A plain object of data that will be passed to the event handler.</desc>
    </argument>
    <argument name="handler" type="Function">
      <desc>A function to execute each time the event is triggered.</desc>
      <argument name="eventObject" type="Event" />
    </argument>
  </signature>
  <desc>Bind an event handler to the "unload" JavaScript event.</desc>
  <longdesc>
    <p>This method is a shortcut for <code>.on( "unload", handler )</code>.</p>
    <p>The <code>unload</code> event is sent to the <code>window</code> element when the user navigates away from the page. This could mean one of many things. The user could have clicked on a link to leave the page, or typed in a new URL in the address bar. The forward and back buttons will trigger the event. Closing the browser window will cause the event to be triggered. Even a page reload will first create an <code>unload</code> event.</p>
    <div class="warning">
      <p>The exact handling of the <code>unload</code> event has varied from version to version of browsers. For example, some versions of Firefox trigger the event when a link is followed, but not when the window is closed. In practical usage, behavior should be tested on all supported browsers, and contrasted with the proprietary <code>beforeunload</code> event.</p>
    </div>
    <p>Any <code>unload</code> event handler should be bound to the <code>window</code> object:</p>
    <pre><code>
$( window ).unload(function() {
  return "Handler for .unload() called.";
});
    </code></pre>
    <p>This event is available so that scripts can perform cleanup when the user leaves the page. Most browsers will ignore calls to <code>alert()</code>, <code>confirm()</code> and <code>prompt()</code> inside the event handler. The string you return may be used in a confirmation dialog, but not all browsers support this. It is not possible to cancel the <code>unload</code> event with <code>.preventDefault()</code>.</p>
  </longdesc>
  <note id="detach-shorthand" type="additional" data-event="unload"/>
  <example>
    <desc>To display an alert when a page is unloaded:</desc>
    <code><![CDATA[
$( window ).unload(function() {
  return "Bye now!";
});
  ]]></code>
  </example>
  <category slug="events/document-loading"/>
  <category slug="version/1.0"/>
  <category slug="version/1.4.3"/>
  <category slug="deprecated/deprecated-1.8"/>
</entry>
