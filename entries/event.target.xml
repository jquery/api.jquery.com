<?xml version="1.0"?>
<entry type="property" name="event.target" return="Element">
  <title>event.target</title>
  <signature>
    <added>1.0</added>
  </signature>
  <desc> The DOM element that initiated the event.  </desc>
  <longdesc>
    <p>The <code>target</code> property can be the element that registered for the event or a descendant of it.  It is often useful to compare <code>event.target</code> to <code>this</code> in order to determine if the event is being handled due to event bubbling. This property is very useful in event delegation, when events bubble.</p>
  </longdesc>
  <example>
    <desc>Display the tag's name on click</desc>
    <code><![CDATA[
$( "body" ).on( "click", function( event ) {
  $( "#log" ).html( "clicked: " + event.target.nodeName );
});
]]></code>
    <css><![CDATA[
  span, strong, p {
    padding: 8px;
    display: block;
    border: 1px solid #999;
  }
]]></css>
    <html><![CDATA[
<div id="log"></div>
<div>
  <p>
    <strong><span>click</span></strong>
  </p>
</div>
]]></html>
  </example>
  <example>
    <desc>Implements a simple event delegation: The click handler is added to an unordered list, and the children of its li children are hidden. Clicking one of the li children toggles (see toggle()) their children.</desc>
    <code><![CDATA[
function handler( event ) {
  var target = $( event.target );
  if ( target.is( "li" ) ) {
    target.children().toggle();
  }
}
$( "ul" ).on( "click", handler ).find( "ul" ).hide();
]]></code>
    <html><![CDATA[
<ul>
  <li>item 1
    <ul>
      <li>sub item 1-a</li>
      <li>sub item 1-b</li>
    </ul>
  </li>
  <li>item 2
    <ul>
      <li>sub item 2-a</li>
      <li>sub item 2-b</li>
    </ul>
  </li>
</ul>
]]></html>
  </example>
  <category slug="events/event-object"/>
  <category slug="version/1.0"/>
</entry>
