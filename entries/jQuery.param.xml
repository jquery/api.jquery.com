<?xml version="1.0"?>
<entry type="method" name="jQuery.param" return="String">
  <title>jQuery.param()</title>
  <signature>
    <added>1.2</added>
    <argument name="obj">
      <type name="Array"/>
      <type name="PlainObject"/>
      <type name="jQuery"/>
      <desc>An array, a plain object, or a jQuery object to serialize.</desc>
    </argument>
  </signature>
  <signature>
    <added>1.4</added>
    <argument name="obj">
      <type name="Array"/>
      <type name="PlainObject"/>
      <type name="jQuery"/>
      <desc>An array, a plain object, or a jQuery object to serialize.</desc>
    </argument>
    <argument name="traditional" type="Boolean">
      <desc>A Boolean indicating whether to perform a traditional "shallow" serialization.</desc>
    </argument>
  </signature>
  <desc>Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name/value properties.</desc>
  <longdesc>
    <p>This function is used internally to convert form element values into a serialized string representation (See <a href="/serialize/">.serialize()</a> for more information).</p>
    <p>As of jQuery 1.3, the return value of a function is used instead of the function as a String.</p>
    <p>As of jQuery 1.4, the <code>$.param()</code> method serializes deep objects recursively to accommodate modern scripting languages and frameworks such as PHP and Ruby on Rails. You can disable this functionality globally by setting <code>jQuery.ajaxSettings.traditional = true;</code>.</p>
    <p>As of jQuery 1.8, the <code>$.param()</code> method no longer uses <code>jQuery.ajaxSettings.traditional</code> as its default setting and will default to <code>false</code>. For best compatibility across versions, call <code>$.param()</code> with an explicit value for the second argument and do not use defaults.</p>
    <p>If the object passed is in an Array, it must be an array of objects in the format returned by <a href="/serializeArray/">.serializeArray()</a></p>
    <pre><code>
[
  { name: "first", value: "Rick" },
  { name: "last", value: "Astley" },
  { name: "job", value: "Rock Star" }
]
    </code></pre>
    <div class="warning">
      <p><strong>Note:</strong> Because some frameworks have limited ability to parse serialized arrays, developers should exercise caution when passing an <code>obj</code> argument that contains objects or arrays nested within another array.</p>
    </div>
    <div class="warning">
      <p><strong>Note:</strong> Because there is no universally agreed-upon specification for param strings, it is not possible to encode complex data structures using this method in a manner that works ideally across all languages supporting such input. Use JSON format as an alternative for encoding complex data instead.</p>
    </div>
    <p>In jQuery 1.4, HTML5 input elements are also serialized.</p>
    <p>We can display a query string representation of an object and a URI-decoded version of the same as follows:</p>
    <pre><code>
var myObject = {
  a: {
    one: 1,
    two: 2,
    three: 3
  },
  b: [ 1, 2, 3 ]
};
var recursiveEncoded = $.param( myObject );
var recursiveDecoded = decodeURIComponent( $.param( myObject ) );

alert( recursiveEncoded );
alert( recursiveDecoded );
    </code></pre>
    <p>The values of <code>recursiveEncoded</code> and <code>recursiveDecoded</code> are alerted as follows:</p>
    <p>
      <samp>a%5Bone%5D=1&amp;a%5Btwo%5D=2&amp;a%5Bthree%5D=3&amp;b%5B%5D=1&amp;b%5B%5D=2&amp;b%5B%5D=3</samp>
      <br/>
      <samp>a[one]=1&amp;a[two]=2&amp;a[three]=3&amp;b[]=1&amp;b[]=2&amp;b[]=3</samp>
    </p>
    <p>To emulate the behavior of <code>$.param()</code> prior to jQuery 1.4, we can set the <code>traditional</code> argument to <code>true</code>:</p>
    <pre><code>
var myObject = {
  a: {
    one: 1,
    two: 2,
    three: 3
  },
  b: [ 1, 2, 3 ]
};
var shallowEncoded = $.param( myObject, true );
var shallowDecoded = decodeURIComponent( shallowEncoded );

alert( shallowEncoded );
alert( shallowDecoded );
</code></pre>
    <p>The values of <code>shallowEncoded</code> and <code>shallowDecoded</code> are alerted as follows:</p>
    <p>
      <samp>a=%5Bobject+Object%5D&amp;b=1&amp;b=2&amp;b=3</samp>
      <br/>
      <samp>a=[object+Object]&amp;b=1&amp;b=2&amp;b=3</samp>
    </p>
  </longdesc>
  <example>
    <desc>Serialize a key/value object.</desc>
    <code><![CDATA[
var params = { width:1680, height:1050 };
var str = jQuery.param( params );
$( "#results" ).text( str );
]]></code>
    <css><![CDATA[
  div {
    color: red;
  }
]]></css>
    <html><![CDATA[
<div id="results"></div>
]]></html>
  </example>
  <example>
    <desc>Serialize a few complex objects</desc>
    <code><![CDATA[
// <=1.3.2:
$.param({ a: [ 2, 3, 4 ] }); // "a=2&a=3&a=4"
// >=1.4:
$.param({ a: [ 2, 3, 4 ] }); // "a[]=2&a[]=3&a[]=4"

// <=1.3.2:
$.param({ a: { b: 1, c: 2 }, d: [ 3, 4, { e: 5 } ] });
// "a=[object+Object]&d=3&d=4&d=[object+Object]"

// >=1.4:
$.param({ a: { b: 1, c: 2 }, d: [ 3, 4, { e: 5 } ] });
// "a[b]=1&a[c]=2&d[]=3&d[]=4&d[2][e]=5"
]]></code>
    <css><![CDATA[
  div {
    color: red;
  }
]]></css>
  </example>
  <category slug="miscellaneous/collection-manipulation"/>
  <category slug="forms"/>
  <category slug="ajax/helper-functions"/>
  <category slug="version/1.2"/>
  <category slug="version/1.4"/>
</entry>
