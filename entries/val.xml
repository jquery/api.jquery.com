<?xml version="1.0"?>
<entries>
  <desc>Get the current value of the first element in the set of matched elements or set the value of every matched element.</desc>
  <entry type="method" name="val">
    <return type="String"/>
    <return type="Number"/>
    <return type="Array"/>
    <title>.val()</title>
    <signature>
      <added>1.0</added>
    </signature>
    <desc>Get the current value of the first element in the set of matched elements.</desc>
    <longdesc>
      <p>The <code>.val()</code> method is primarily used to get the values of form elements such as <code>input</code>, <code>select</code> and <code>textarea</code>. In the case of <code>select</code> elements, it returns <code>null</code> when no option is selected and an array containing the value of each selected option when there is at least one and it is possible to select more because the <code>multiple</code> attribute is present.</p>
      <p>For selects and checkboxes, you can also use the <a href="/selected-selector/">:selected</a> and <a href="/checked-selector/">:checked</a> selectors to get at values, for example:</p>
      <pre><code>
// Get the value from a dropdown select
$( "select.foo option:selected").val();

// Get the value from a dropdown select even easier
$( "select.foo" ).val();

// Get the value from a checked checkbox
$( "input:checkbox:checked" ).val();

// Get the value from a set of radio buttons
$( "input:radio[name=bar]:checked" ).val();
      </code></pre>
      <div class="warning">
        <p><strong>Note: </strong> At present, using <code>.val()</code> on textarea elements strips carriage return characters from the browser-reported value. When this value is sent to the server via XHR however, carriage returns are preserved (or added by browsers which do not include them in the raw value). A workaround for this issue can be achieved using a valHook as follows:</p>
      </div>
      <pre><code>
$.valHooks.textarea = {
  get: function( elem ) {
    return elem.value.replace( /\r?\n/g, "\r\n" );
  }
};
    </code></pre>
    </longdesc>
    <example>
      <desc>Get the single value from a single select and an array of values from a multiple select and display their values.</desc>
      <code><![CDATA[
function displayVals() {
  var singleValues = $( "#single" ).val();
  var multipleValues = $( "#multiple" ).val() || [];
  $( "p" ).html( "<b>Single:</b> " + singleValues +
    " <b>Multiple:</b> " + multipleValues.join( ", " ) );
}

$( "select" ).change( displayVals );
displayVals();
]]></code>
      <css><![CDATA[
  p {
    color: red;
    margin: 4px;
  }
  b {
    color: blue;
  }
]]></css>
      <html><![CDATA[
<p></p>

<select id="single">
  <option>Single</option>
  <option>Single2</option>
</select>

<select id="multiple" multiple="multiple">
  <option selected="selected">Multiple</option>
  <option>Multiple2</option>
  <option selected="selected">Multiple3</option>
</select>
]]></html>
    </example>
    <example>
      <desc>Find the value of an input box.</desc>
      <code><![CDATA[
$( "input" )
  .keyup(function() {
    var value = $( this ).val();
    $( "p" ).text( value );
  })
  .keyup();
]]></code>
      <css><![CDATA[
  p {
    color: blue;
    margin: 8px;
  }
]]></css>
      <html><![CDATA[
<input type="text" value="some text">
<p></p>
]]></html>
    </example>
    <category slug="attributes"/>
    <category slug="forms"/>
    <category slug="manipulation/general-attributes"/>
    <category slug="version/1.0"/>
    <category slug="version/1.4"/>
  </entry>
  <entry type="method" name="val" return="jQuery">
    <signature>
      <added>1.0</added>
      <argument name="value">
        <type name="String"/>
        <type name="Number"/>
        <type name="Array"/>
        <desc>A string of text, a number, or an array of strings corresponding to the value of each matched element to set as selected/checked.</desc>
      </argument>
    </signature>
    <signature>
      <added>1.4</added>
      <argument name="function" type="Function">
        <argument name="index" type="Integer" />
        <argument name="value" type="String" />     
        <return type="String" />         
        <desc>A function returning the value to set. <code>this</code> is the current element. Receives the index position of the element in the set and the old value as arguments.</desc>
      </argument>
    </signature>
    <desc>Set the value of each element in the set of matched elements.</desc>
    <longdesc>
      <p>This method is typically used to set the values of form fields. </p>
      <p><code>val()</code> allows you to pass an array of element values. This is useful when working on a jQuery object containing elements like <code>&lt;input type="checkbox"&gt;</code>, <code>&lt;input type="radio"&gt;</code>, and <code>&lt;option&gt;</code>s inside of a <code>&lt;select&gt;</code>. In this case, the <code>input</code>s and the <code>option</code>s having a <code>value</code> that matches one of the elements of the array will be checked or selected while those having a <code>value</code> that don't match one of the elements of the array will be unchecked or unselected, depending on the type. In case of <code>&lt;input type="radio"&gt;</code>s that are part of a radio group and <code>&lt;select&gt;</code>s, any previously selected element will be deselected.</p>
      <p>The <code>.val()</code> method allows us to set the value by passing in a function. As of jQuery 1.4, the function is passed two arguments, the current element's index and its current value: </p>
      <pre><code>
$( "input:text.items" ).val(function( index, value ) {
  return value + " " + this.className;
});
      </code></pre>
      <p>This example appends the string " items" to the text inputs' values.</p>
    </longdesc>
    <example>
      <desc>Set the value of an input box.</desc>
      <code><![CDATA[
$( "button" ).click(function() {
  var text = $( this ).text();
  $( "input" ).val( text );
});
]]></code>
      <css><![CDATA[
  button {
    margin: 4px;
    cursor: pointer;
  }
  input {
    margin: 4px;
    color: blue;
  }
]]></css>
      <html><![CDATA[
<div>
  <button>Feed</button>
  <button>the</button>
  <button>Input</button>
</div>
<input type="text" value="click a button">
]]></html>
    </example>
    <example>
      <desc>Use the function argument to modify the value of an input box.</desc>
      <code><![CDATA[
$( "input" ).on( "blur", function() {
  $( this ).val(function( i, val ) {
    return val.toUpperCase();
  });
});
]]></code>
      <html><![CDATA[
<p>Type something and then click or tab out of the input.</p>
<input type="text" value="type something">
]]></html>
    </example>
    <example>
      <desc>Set a single select, a multiple select, checkboxes and a radio button .</desc>
      <code><![CDATA[
$( "#single" ).val( "Single2" );
$( "#multiple" ).val([ "Multiple2", "Multiple3" ]);
$( "input").val([ "check1", "check2", "radio1" ]);
]]></code>
      <css><![CDATA[
  body {
    color: blue;
  }
]]></css>
      <html><![CDATA[
<select id="single">
  <option>Single</option>
  <option>Single2</option>
</select>

<select id="multiple" multiple="multiple">
  <option selected="selected">Multiple</option>
  <option>Multiple2</option>
  <option selected="selected">Multiple3</option>
</select>

<br>
<input type="checkbox" name="checkboxname" value="check1"> check1
<input type="checkbox" name="checkboxname" value="check2"> check2
<input type="radio" name="r" value="radio1"> radio1
<input type="radio" name="r" value="radio2"> radio2
]]></html>
    </example>
    <category slug="attributes"/>
    <category slug="forms"/>
    <category slug="manipulation/general-attributes"/>
    <category slug="version/1.0"/>
    <category slug="version/1.4"/>
  </entry>
</entries>
