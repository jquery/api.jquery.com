<?xml version="1.0"?>
<entries>
  <entry type="method" name="closest" return="jQuery">
    <title>.closest()</title>
    <signature>
      <added>1.3</added>
      <argument name="selector" type="Selector">
        <desc>A string containing a selector expression to match elements against.</desc>
      </argument>
    </signature>
    <signature>
      <added>1.4</added>
      <argument name="selector" type="Selector">
        <desc>A string containing a selector expression to match elements against.</desc>
      </argument>
      <argument name="context" optional="true" type="Element">
        <desc>A DOM element within which a matching element may be found. If no context is passed in then the context of the jQuery set will be used instead.</desc>
      </argument>
    </signature>
    <signature>
      <added>1.6</added>
      <argument name="jQuery object" type="jQuery">
        <desc>A jQuery object to match elements against.</desc>
      </argument>
    </signature>
    <signature>
      <added>1.6</added>
      <argument name="element" type="Element">
        <desc>An element to match elements against.</desc>
      </argument>
    </signature>
    <desc>For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.</desc>
    <longdesc>
      <p>Given a jQuery object that represents a set of DOM elements, the <code>.closest()</code> method searches through these elements and their ancestors in the DOM tree and constructs a new jQuery object from the matching elements. The <a href="/parents/"><code>.parents()</code></a> and <code>.closest()</code> methods are similar in that they both traverse up the DOM tree. The differences between the two, though subtle, are significant:</p>
      <table>
        <thead>
          <tr>
            <th>
              <code>.closest()</code>
            </th>
            <th>
              <a href="/parents/">
                <code>.parents()</code>
              </a>
            </th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Begins with the current element</td>
            <td>Begins with the parent element</td>
          </tr>
          <tr>
            <td>Travels up the DOM tree until it finds a match for the supplied selector</td>
            <td>Travels up the DOM tree to the document's root element, adding each ancestor element to a temporary collection; it then filters that collection based on a selector if one is supplied </td>
          </tr>
          <tr>
            <td>The returned jQuery object contains zero or one element for each element in the original set, in document order</td>
            <td>The returned jQuery object contains zero or more elements for each element in the original set, in reverse document order</td>
          </tr>
        </tbody>
      </table>
      <pre><code>
&lt;ul id="one" class="level-1"&gt;
  &lt;li class="item-i"&gt;I&lt;/li&gt;
  &lt;li id="ii" class="item-ii"&gt;II
  &lt;ul class="level-2"&gt;
    &lt;li class="item-a"&gt;A&lt;/li&gt;
    &lt;li class="item-b"&gt;B
      &lt;ul class="level-3"&gt;
        &lt;li class="item-1"&gt;1&lt;/li&gt;
        &lt;li class="item-2"&gt;2&lt;/li&gt;
        &lt;li class="item-3"&gt;3&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li class="item-c"&gt;C&lt;/li&gt;
  &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class="item-iii"&gt;III&lt;/li&gt;
&lt;/ul&gt;
      </code></pre>
      <p>Suppose we perform a search for <code>&lt;ul&gt;</code> elements starting at item A:</p>
      <pre><code>
$( "li.item-a" )
  .closest( "ul" )
  .css( "background-color", "red" );
      </code></pre>
      <p>This will change the color of the level-2 <code>&lt;ul&gt;</code>, since it is the first encountered when traveling up the DOM tree.</p>
      <p>Suppose we search for an <code>&lt;li&gt;</code> element instead:</p>
      <pre><code>
$( "li.item-a" )
  .closest( "li" )
  .css( "background-color", "red" );
      </code></pre>
      <p>This will change the color of list item A. The <code>.closest()</code> method begins its search <em>with the element itself</em> before progressing up the DOM tree, and stops when item A matches the selector.</p>
      <p>We can pass in a DOM element as the context within which to search for the closest element.</p>
      <pre><code>
var listItemII = document.getElementById( "ii" );
$( "li.item-a" )
  .closest( "ul", listItemII )
  .css( "background-color", "red" );
$( "li.item-a" )
  .closest( "#one", listItemII )
  .css( "background-color", "green" );
      </code></pre>
      <p>This will change the color of the level-2 <code>&lt;ul&gt;</code>, because it is both the first <code>&lt;ul&gt;</code> ancestor of list item A and a descendant of list item II. It will not change the color of the level-1 <code>&lt;ul&gt;</code>, however, because it is not a descendant of list item II.</p>
    </longdesc>
    <example>
      <desc>Show how event delegation can be done with closest. The closest list element toggles a yellow background when it or its descendent is clicked.</desc>
      <code><![CDATA[
$( document ).on( "click", function( event ) {
  $( event.target ).closest( "li" ).toggleClass( "hilight" );
});
]]></code>
      <css><![CDATA[
  li {
    margin: 3px;
    padding: 3px;
    background: #EEEEEE;
  }
  li.hilight {
    background: yellow;
  }
]]></css>
      <html><![CDATA[
<ul>
  <li><b>Click me!</b></li>
  <li>You can also <b>Click me!</b></li>
</ul>
]]></html>
    </example>
    <example>
      <desc>Pass a jQuery object to closest. The closest list element toggles a yellow background when it or its descendent is clicked.</desc>
      <code><![CDATA[
var listElements = $( "li" ).css( "color", "blue" );
$( document ).on( "click", function( event ) {
  $( event.target ).closest( listElements ).toggleClass( "hilight" );
});
]]></code>
      <css><![CDATA[
  li {
    margin: 3px;
    padding: 3px;
    background: #EEEEEE;
  }
  li.hilight {
    background: yellow;
  }
]]></css>
      <html><![CDATA[
<ul>
  <li><b>Click me!</b></li>
  <li>You can also <b>Click me!</b></li>
</ul>
]]></html>
    </example>
    <category slug="traversing/tree-traversal"/>
    <category slug="version/1.3"/>
    <category slug="version/1.4"/>
    <category slug="version/1.6"/>
  </entry>
  <entry type="method" name="closest" return="Array" deprecated="1.7" removed="1.8">
    <signature>
      <added>1.4</added>
      <argument name="selectors" type="Array">
        <desc>An array or string containing a selector expression to match elements against (can also be a jQuery object).</desc>
      </argument>
      <argument name="context" optional="true" type="Element">
        <desc>A DOM element within which a matching element may be found. If no context is passed in then the context of the jQuery set will be used instead.</desc>
      </argument>
    </signature>
    <desc>Get an array of all the elements and selectors matched against the current element up through the DOM tree.</desc>
    <longdesc>
      <div class="warning"><strong>This signature (only!) is deprecated as of jQuery 1.7 and <em>removed</em> in jQuery 1.8</strong>. It was primarily meant to be used internally or by plugin authors.</div>
    </longdesc>
    <category slug="traversing/tree-traversal"/>
    <category slug="version/1.3"/>
    <category slug="version/1.4"/>
    <category slug="version/1.6"/>
  </entry>
</entries>
