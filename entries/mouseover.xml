<?xml version="1.0"?>
<entries>
<desc>Bind an event handler to the "mouseover" event, or trigger that event on an element.</desc>

<entry type="method" name="on" return="jQuery">
  <title>mouseover event</title>
  <desc>Bind an event handler to the "mouseover" event.</desc>
  <signature>
    <added>1.7</added>
    <argument name="&quot;mouseover&quot;" type="string">
      <desc>The string <code>"mouseover"</code>.</desc>
    </argument>
    <argument name="eventData" type="Anything" optional="true">
      <desc>An object containing data that will be passed to the event handler.</desc>
    </argument>
    <argument name="handler" type="Function">
      <desc>A function to execute each time the event is triggered.</desc>
      <argument name="eventObject" type="Event" />
    </argument>
  </signature>
  <longdesc>
    <div class="warning">
      <p>This page describes the <code>mouseover</code> event. For the deprecated <code>.mouseover()</code> method, see <a href="/mouseover-shorthand/"><code>.mouseover()</code></a>.</p>
    </div>
    <p>The <code>mouseover</code> event is sent to an element when the mouse pointer enters the element. Any HTML element can receive this event.</p>
    <p>For example, consider the HTML:</p>
    <pre><code>
&lt;div id="outer"&gt;
  Outer
  &lt;div id="inner"&gt;
    Inner
  &lt;/div&gt;
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
&lt;div id="log"&gt;&lt;/div&gt;
    </code></pre>
    <figure>
      <img src="/resources/0042_05_06.png" alt=""/>
      <figcaption>Figure 1 - Illustration of the rendered HTML</figcaption>
    </figure>
    <p>The event handler can be bound to any element:</p>
    <pre><code>
$( "#outer" ).on( "mouseover", function() {
  $( "#log" ).append( "&lt;div&gt;Handler for `mouseover` called.&lt;/div&gt;" );
} );
    </code></pre>
    <p>Now when the mouse pointer moves over the <samp>Outer</samp> <code>&lt;div&gt;</code>, the message is appended to <code>&lt;div id="log"&gt;</code>. We can also trigger the event when another element is clicked:</p>
    <pre><code>
$( "#other" ).on( "click", function() {
  $( "#outer" ).trigger( "mouseover" );
} );
    </code></pre>
    <p>After this code executes, clicks on <samp>Trigger the handler</samp> will also append the message.</p>
    <p>This event type can cause many headaches due to event bubbling. For instance, when the mouse pointer moves over the <samp>Inner</samp> element in this example, a <code>mouseover</code> event will be sent to that, then trickle up to <samp>Outer</samp>. This can trigger our bound <code>mouseover</code> handler at inopportune times. See the discussion for <code>.mouseenter()</code> for a useful alternative.</p>
  </longdesc>
  <example>
    <desc>Show the number of times mouseover and mouseenter events are triggered.
<code>mouseover</code> fires when the pointer moves into the child element as well, while <code>mouseenter</code> fires only when the pointer moves into the bound element.</desc>
    <css><![CDATA[
  div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
  }
  div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
  }
  p {
    line-height: 1em;
    margin: 0;
    padding: 0;
  }
]]></css>
    <code><![CDATA[
var i = 0;
$( "div.overout" )
  .on( "mouseover", function() {
    i += 1;
    $( this ).find( "span" ).text( "mouse over x " + i );
  } )
  .on( "mouseout", function() {
    $( this ).find( "span" ).text( "mouse out " );
  } );

var n = 0;
$( "div.enterleave" )
  .on( "mouseenter", function() {
    n += 1;
    $( this ).find( "span" ).text( "mouse enter x " + n );
  } )
  .on( "mouseleave", function() {
    $( this ).find( "span" ).text( "mouse leave" );
  } );
]]></code>
    <html><![CDATA[
<div class="out overout">
  <span>move your mouse</span>
  <div class="in">
  </div>
</div>

<div class="out enterleave">
  <span>move your mouse</span>
  <div class="in">
  </div>
</div>
]]></html>
  </example>
  <category slug="events/mouse-events"/>
  <category slug="version/1.0"/>
  <category slug="version/1.7"/>
</entry>

<entry type="method" name="trigger" return="jQuery">
  <title>mouseover event</title>
  <desc>Trigger the "mouseover" event on an element.</desc>
  <signature>
    <added>1.0</added>
    <argument name="&quot;mouseover&quot;" type="string">
      <desc>The string <code>"mouseover"</code>.</desc>
    </argument>
  </signature>
  <longdesc>
    <p>See the description for <a href="#on1"><code>.on( "mouseover", ... )</code></a>.</p>
  </longdesc>
  <category slug="events/mouse-events"/>
  <category slug="version/1.0"/>
</entry>
  
</entries>
