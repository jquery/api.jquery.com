<?xml version="1.0"?>
<entry type="method" name="jQuery.post" return="jqXHR">
  <title>jQuery.post()</title>
  <signature>
    <added>1.0</added>
    <argument name="url" type="String">
      <desc>A string containing the URL to which the request is sent.</desc>
    </argument>
    <argument name="data" optional="true">
      <type name="PlainObject"/>
      <type name="String"/>
      <desc>A plain object or string that is sent to the server with the request.</desc>
    </argument>
    <argument name="success" optional="true" type="Function">
      <argument name="data" type="PlainObject" />
      <argument name="textStatus" type="String"/>
      <argument name="jqXHR" type="jqXHR"/>
      <desc>A callback function that is executed if the request succeeds. Required if <code>dataType</code> is provided, but can be <code>null</code> in that case.</desc>
    </argument>
    <argument name="dataType" optional="true" type="String">
      <desc>The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).</desc>
    </argument>
  </signature>
  <signature>
    <added>1.12-and-2.2</added>
    <argument name="settings" type="PlainObject" optional="false">
      <desc>A set of key/value pairs that configure the Ajax request. All properties except for <code>url</code> are optional. A default can be set for any option with <a href="/jQuery.ajaxSetup/">$.ajaxSetup()</a>. See <a href="/jquery.ajax/#jQuery-ajax-settings">jQuery.ajax( settings )</a> for a complete list of all settings. Type will automatically be set to <code>POST</code>.</desc>
    </argument>
  </signature>
  <desc>Load data from the server using a HTTP POST request.</desc>
  <longdesc>
    <p>This is a shorthand Ajax function, which is equivalent to:</p>
    <pre><code>
$.ajax({
  type: "POST",
  url: url,
  data: data,
  success: success,
  dataType: dataType
});
    </code></pre>
    <p>The <code>success</code> callback function is passed the returned data, which will be an XML root element or a text string depending on the MIME type of the response. It is also passed the text status of the response.</p>
    <p><strong>As of jQuery 1.5</strong>, the <code>success</code> callback function is also passed a <a href="#jqxhr-object">"jqXHR" object</a> (in <strong>jQuery 1.4</strong>, it was passed the <code>XMLHttpRequest</code> object).</p>
    <p>Most implementations will specify a success handler:</p>
    <pre><code>
$.post( "ajax/test.html", function( data ) {
  $( ".result" ).html( data );
});
    </code></pre>
    <p>This example fetches the requested HTML snippet and inserts it on the page.</p>
    <p>Pages fetched with <code>POST</code> are never cached, so the <code>cache</code> and <code>ifModified</code> options in <code><a href="/jQuery.ajaxSetup/">jQuery.ajaxSetup()</a></code> have no effect on these requests.</p>
    <h4 id="jqxhr-object">The jqXHR Object</h4>
    <p><strong>As of jQuery 1.5</strong>, all of jQuery's Ajax methods return  a superset of the <code>XMLHTTPRequest</code> object. This jQuery XHR object, or "jqXHR," returned by <code>$.post()</code> implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see <a href="/category/deferred-object/">Deferred object</a> for more information). The <code>jqXHR.done()</code> (for success), <code>jqXHR.fail()</code> (for error), and <code>jqXHR.always()</code> (for completion, whether success or error; added in jQuery 1.6) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the <a href="/jQuery.ajax/#jqXHR">jqXHR Object</a> section of the <code>$.ajax()</code> documentation.</p>
        <p>The Promise interface also allows jQuery's Ajax methods, including <code>$.get()</code>, to chain multiple <code>.done()</code>, <code>.fail()</code>, and <code>.always()</code> callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.</p>
    <pre><code>
// Assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.post( "example.php", function() {
  alert( "success" );
})
  .done(function() {
    alert( "second success" );
  })
  .fail(function() {
    alert( "error" );
  })
  .always(function() {
    alert( "finished" );
  });

// Perform other work here ...

// Set another completion function for the request above
jqxhr.always(function() {
  alert( "second finished" );
});
    </code></pre>

    <h4>Deprecation Notice</h4>
    <p>The <code>jqXHR.success()</code>, <code>jqXHR.error()</code>, and <code>jqXHR.complete()</code> callback methods are <strong>removed as of jQuery 3.0</strong>. You can use <code>jqXHR.done()</code>, <code>jqXHR.fail()</code>, and <code>jqXHR.always()</code> instead.</p>
  </longdesc>
  <note id="same-origin-policy" type="additional"/>
  <note id="use-ajaxerror" type="additional" data-title="jQuery.post()"/>
  <example>
    <desc>Request the test.php page, but ignore the return results.</desc>
    <code><![CDATA[
$.post( "test.php" );
]]></code>
  </example>
  <example>
    <desc>Request the test.php page and send some additional data along (while still ignoring the return results).</desc>
    <code><![CDATA[
$.post( "test.php", { name: "John", time: "2pm" } );
]]></code>
  </example>
  <example>
    <desc>Pass arrays of data to the server (while still ignoring the return results).</desc>
    <code><![CDATA[
$.post( "test.php", { 'choices[]': [ "Jon", "Susan" ] } );
]]></code>
  </example>
  <example>
    <desc>Send form data using Ajax requests</desc>
    <code><![CDATA[
$.post( "test.php", $( "#testform" ).serialize() );
]]></code>
  </example>
  <example>
    <desc>Alert the results from requesting test.php (HTML or XML, depending on what was returned).</desc>
    <code><![CDATA[
$.post( "test.php", function( data ) {
  alert( "Data Loaded: " + data );
});
]]></code>
  </example>
  <example>
    <desc>Alert the results from requesting test.php with an additional payload of data (HTML or XML, depending on what was returned).</desc>
    <code><![CDATA[
$.post( "test.php", { name: "John", time: "2pm" })
  .done(function( data ) {
    alert( "Data Loaded: " + data );
  });
]]></code>
  </example>
  <example>
    <desc>Post to the test.php page and get content which has been returned in json format (&lt;?php echo json_encode(array("name"=&gt;"John","time"=&gt;"2pm")); ?&gt;).</desc>
    <code><![CDATA[
$.post( "test.php", { func: "getNameAndTime" }, function( data ) {
  console.log( data.name ); // John
  console.log( data.time ); // 2pm
}, "json");
]]></code>
  </example>
  <example>
    <desc>Post a form using Ajax and put results in a div</desc>
    <code><![CDATA[
// Attach a submit handler to the form
$( "#searchForm" ).submit(function( event ) {

  // Stop form from submitting normally
  event.preventDefault();

  // Get some values from elements on the page:
  var $form = $( this ),
    term = $form.find( "input[name='s']" ).val(),
    url = $form.attr( "action" );

  // Send the data using post
  var posting = $.post( url, { s: term } );

  // Put the results in a div
  posting.done(function( data ) {
    var content = $( data ).find( "#content" );
    $( "#result" ).empty().append( content );
  });
});
]]></code>
    <html><![CDATA[
<form action="/" id="searchForm">
  <input type="text" name="s" placeholder="Search...">
  <input type="submit" value="Search">
</form>
<!-- the result of the search will be rendered inside this div -->
<div id="result"></div>
]]></html>
  </example>
  <category slug="ajax/shorthand-methods"/>
  <category slug="version/1.0"/>
  <category slug="version/1.5"/>
  <category slug="version/1.12-and-2.2"/>
</entry>
